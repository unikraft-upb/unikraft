menuconfig PLAT_XEN
       bool "Xen guest image"
       default n
       depends on ((ARCH_X86_32 && !HAVE_SMP) || (ARCH_X86_64 && !HAVE_SMP) || (ARCH_ARM_32 && !HAVE_SMP))
       depends on ((ARCH_X86_32 && !HAVE_SYSCALL) || (ARCH_X86_64 && !HAVE_SYSCALL) || (ARCH_ARM_32 && !HAVE_SYSCALL))
       depends on !HAVE_PAGING
       imply XEN_PV_BUILD_P2M
       select LIBUKDEBUG
       select LIBNOLIBC if !HAVE_LIBC
       select LIBUKTIME if !HAVE_LIBC && ARCH_X86_64
       select LIBFDT if ARCH_ARM_32
       select XEN_DBGEMERGENCY if ARCH_ARM_32
       help
                Create a Unikraft image that runs as a Xen guest

if (PLAT_XEN)
# Invisible option to switch between PV and PVH mode
config XEN_HVMLITE
	bool
	default n if (ARCH_X86_64 || ARCH_X86_32)
	default y

config XEN_PV
	bool
	default n if XEN_HVMLITE
	default y

menu "Console Options"

config XEN_KERNEL_HV_CONSOLE
	bool "Hypervisor console for kernel prints"
	default y
	depends on ARCH_X86_64
	help
		Send kernel messages to the hypervisor console.

config XEN_KERNEL_EMG_CONSOLE
	bool "Emergency console for kernel prints"
	default y if ARCH_ARM_32
	default n
	help
		Send kernel messages to the emergency console.

config XEN_DEBUG_HV_CONSOLE
	bool "Hypervisor console for debug prints"
	default y
	depends on ARCH_X86_64
	help
		Send debug messages to the hypervisor console.

config XEN_DEBUG_EMG_CONSOLE
	bool "Emergency console for debug prints"
	default y if ARCH_ARM_32
	default n
        help
		Send debug messages to the emergency console.
endmenu

config XEN_PV_BUILD_P2M
	bool "Create p2m table"
	depends on (ARCH_X86_64 && XEN_PV)
	default n
	help
		Create and initialize physical to machine (p2m) table on a PV
		xen host

config XEN_GNTTAB
	bool "Grant table support"
	default y if XEN_PV
	default n
	depends on (ARCH_X86_64)
	select LIBUKALLOC
	select LIBUKLOCK
	select LIBUKLOCK_SEMAPHORE
	select LIBUKSCHED
	help
		Support grant table operations

config XEN_GNTTAB_FRAMES
	int
	depends on XEN_GNTTAB
	default 4

config XEN_XENBUS
	bool "Xenbus/XenStore driver"
	default y if XEN_PV
	default n
	depends on XEN_GNTTAB
	select LIBUKALLOC
	select LIBUKSCHED
	select LIBUKBUS
	help
		Registers Xenbus as bus driver to libukbus and provides a
		XenStore communication API for Xen drivers

menu "Xenbus Drivers"
	depends on XEN_XENBUS

config XEN_NETFRONT
	bool "Xenbus Netfront Driver"
	default y if LIBUKNETDEV
	default n
	depends on LIBUKNETDEV
	help
		Driver for netfront devices

menuconfig XEN_BLKFRONT
	bool "Xenbus Blkfront Driver"
	default y if LIBUKBLKDEV
	default n
	depends on LIBUKBLKDEV
	help
		Driver for block devices

config XEN_BLKFRONT_GREFPOOL
	bool "Enable grant reference pool for each queue"
	default y
	depends on XEN_BLKFRONT
	select LIBUKSCHED
	select LIBUKLOCK
	select LIBUKLOCK_SEMAPHORE
	help
		Each read / write request needs a number of
		grant references. In order to avoid the need
		of allocating the grant refs at the beginning
		of every operation and freeing them at the end
		of it, we use the same grant references stored
		in a queue. If at the moment of sending a
		request, there are not enough grant refs in the
		pool, we just allocate new ones, which are
		freed at the moment of processing the response.

menuconfig XEN_9PFRONT
	bool "Xenbus 9pfront Driver"
	default y if LIBUK9P
	default n
	depends on LIBUK9P
	help
		Driver for 9pfs devices

config XEN_9PFRONT_NB_RINGS
	int "Xen 9P ring number"
	default 2
	depends on XEN_9PFRONT
	help
		Number of rings to allocate.
		Will be clamped to the maximum value allowed by the backend.

config XEN_9PFRONT_RING_ORDER
	int "Xen 9P ring order"
	default 6
	depends on XEN_9PFRONT
	help
		Ring order for xen 9P devices. Orders of 0, 1, 2, ..., 9 will
		create rings of size 4K, 8K, 16K, ..., 2M respectively.
		Will be clamped to the maximum value allowed by the backend.
endmenu

config XEN_SHUTDOWN
	bool "Shutdown request handler"
	depends on LIBUKSCHED
	depends on XEN_XENBUS
	default y
	help
		Starts a handler thread that listens on request
		via the XenStore entry `control/shutdown`. This
		option enables handling on hypervisor shutdown
		requests.

config XEN_MAX_STATIC_MEMORY
	int "Maximum static memory in MiB"
	depends on XEN_PV
	default 1024
	help
		Xen creates a boot page table to map the first X amount of
		physical memory in a 1:1 mapping. This option configures how
		much memory the page table should be able to cover at most. If
		more memory is needed paging must be activated. Note: Choose
		as small as possible as page table memory is statically
		reserved in the .bss segment.

config XEN_PREMAP_MEMORY
	int "Premapped heap memory in MiB"
	depends on XEN_PV
	default 16
	help
		We actually only map this amount of memory in addition to the
		kernel image during boot and map the rest of the static memory
		on demand. This saves boot time as Xen does not have to
		validate all PTEs at once.

endif
